{
  "address": "0x6ADd5882CC05143B187295c494D63FEee54dC820",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractTitle",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RandomBloodType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RandomCPF",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RandomDisease",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RandomName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_doctorAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_crm",
          "type": "string"
        }
      ],
      "name": "addDoctor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_cpf",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_birthDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bloodType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_recipientAge",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_patientWalletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_organSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_urgency",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_disease",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_curability",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_qConstant",
          "type": "uint256"
        }
      ],
      "name": "addPatient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPatients",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "cpf",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "birthDate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "patientWalletAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bloodType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "recipientAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "organSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "urgency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "curability",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qConstant",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "queueEntryDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "disease",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractTitle",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "doctors",
      "outputs": [
        {
          "internalType": "string",
          "name": "crm",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_patientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newPriority",
          "type": "uint256"
        }
      ],
      "name": "elevatePriority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "generateRandomPatient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPatients",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "cpf",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "birthDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "doctorAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "patientWalletAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bloodType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "recipientAge",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "organSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "urgency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "curability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qConstant",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "queueEntryDate",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "disease",
              "type": "string"
            }
          ],
          "internalType": "struct MedicalContract.Patient[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_doctorAddress",
          "type": "address"
        }
      ],
      "name": "getAllPatientsByDoctor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "cpf",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "birthDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "doctorAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "patientWalletAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bloodType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "recipientAge",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "organSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "urgency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "curability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qConstant",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "queueEntryDate",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "disease",
              "type": "string"
            }
          ],
          "internalType": "struct MedicalContract.Patient[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_doctorAddress",
          "type": "address"
        }
      ],
      "name": "getDoctorCRM",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_patientAddress",
          "type": "address"
        }
      ],
      "name": "getPatientByAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "patientAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "oldValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newValue",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "field",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "doctorAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            }
          ],
          "internalType": "struct MedicalContract.Record[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_patientAddress",
          "type": "address"
        }
      ],
      "name": "getPatientRecords",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "patientAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "oldValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newValue",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "field",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "doctorAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            }
          ],
          "internalType": "struct MedicalContract.Record[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTitle",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "patientsByDoctor",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "cpf",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "birthDate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "patientWalletAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bloodType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "recipientAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "organSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "urgency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "curability",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qConstant",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "queueEntryDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "disease",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "records",
      "outputs": [
        {
          "internalType": "address",
          "name": "patientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "field",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9cdda6be373993d08615f1459a1b382730970b8e091e21fbac1a63cfc95b4254",
  "receipt": {
    "to": null,
    "from": "0xb7D3F862ebBed6C5E61B76e407ce28ea16aD1289",
    "contractAddress": "0x6ADd5882CC05143B187295c494D63FEee54dC820",
    "transactionIndex": 0,
    "gasUsed": "4982017",
    "logsBloom": "0x
    "blockHash": "0x6482ad5c2048a3dcc91c2a054ae364f36b93cac113ed28bcaee7331895c4c53d",
    "transactionHash": "0x9cdda6be373993d08615f1459a1b382730970b8e091e21fbac1a63cfc95b4254",
    "logs": [],
    "blockNumber": 3390776,
    "cumulativeGasUsed": "4982017",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Coração"
  ],
  "numDeployments": 17,
  "solcInputHash": "a29f88ddee22e7b1c6cfcc3ee9b7ef2e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractTitle\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RandomBloodType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RandomCPF\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RandomDisease\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RandomName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_doctorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_crm\",\"type\":\"string\"}],\"name\":\"addDoctor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_cpf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_birthDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bloodType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_recipientAge\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_patientWalletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_organSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_urgency\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_disease\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_curability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_qConstant\",\"type\":\"uint256\"}],\"name\":\"addPatient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPatients\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cpf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patientWalletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bloodType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"recipientAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"organSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"urgency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qConstant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueEntryDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"disease\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTitle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"doctors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"crm\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_patientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newPriority\",\"type\":\"uint256\"}],\"name\":\"elevatePriority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateRandomPatient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPatients\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cpf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patientWalletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bloodType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"recipientAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"organSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"urgency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qConstant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueEntryDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"disease\",\"type\":\"string\"}],\"internalType\":\"struct MedicalContract.Patient[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_doctorAddress\",\"type\":\"address\"}],\"name\":\"getAllPatientsByDoctor\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cpf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patientWalletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bloodType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"recipientAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"organSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"urgency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qConstant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueEntryDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"disease\",\"type\":\"string\"}],\"internalType\":\"struct MedicalContract.Patient[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_doctorAddress\",\"type\":\"address\"}],\"name\":\"getDoctorCRM\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_patientAddress\",\"type\":\"address\"}],\"name\":\"getPatientByAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"patientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"field\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct MedicalContract.Record[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_patientAddress\",\"type\":\"address\"}],\"name\":\"getPatientRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"patientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"field\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct MedicalContract.Record[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTitle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"patientsByDoctor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cpf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patientWalletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bloodType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"recipientAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"organSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"urgency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qConstant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueEntryDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"disease\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"patientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"field\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MedicalContract.sol\":\"MedicalContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/MedicalContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract MedicalContract {\\n    address public owner;\\n    string public contractTitle;\\n\\n    string[] public RandomName = ['Joao', 'Maria', 'Jose', 'Ana', 'Francisco', 'Antonio', 'Luiz', 'Paulo', 'Carlos', 'Manoel', 'Pedro', 'Francisca', 'Marcos', 'Raimundo', 'Sebastiao', 'Antonia', 'Marcelo', 'Marcia', 'Ricardo', 'Fernando']; \\n    string[] public RandomBloodType = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-', 'A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-', 'A+', 'A-', 'B+', 'B-'];\\n    string[] public RandomCPF = ['123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00'];\\n    string[] public RandomDisease = [\\\"Cancer\\\", \\\"Hepatite\\\", \\\"Covid\\\", \\\"Gripe\\\", \\\"Dengue\\\", \\\"Zika\\\", \\\"Chikungunya\\\", \\\"Febre Amarela\\\", \\\"Sarampo\\\", \\\"Caxumba\\\", \\\"Rubeola\\\", \\\"Varicela\\\", \\\"Herpes\\\", \\\"HIV\\\", \\\"HPV\\\", \\\"Gonorreia\\\", \\\"Sifilis\\\", \\\"Tuberculose\\\", \\\"Hanseniase\\\", \\\"Leishmaniose\\\"];\\n\\n\\n    struct Patient {\\n        string name;\\n        string cpf;\\n        uint256 birthDate;\\n        address doctorAddress;\\n         address patientWalletAddress;\\n        string bloodType;\\n        uint256 recipientAge;\\n        uint256 organSize;\\n        uint256 urgency; // Fator de urg\\u00eancia\\n        uint256 curability; // Fator de curabilidade\\n        uint256 qConstant; // Fator Q Constant\\n        uint256 queueEntryDate; // Data que foi adicionado na fila\\n        string disease;\\n    }\\n    \\n    struct Record {\\n        address patientAddress;\\n        uint256 oldValue;\\n        uint256 newValue;\\n        string field;\\n        address doctorAddress;\\n        uint256 date;\\n    }\\n    \\n    struct Doctor {\\n        string crm;\\n        address doctorAddress;\\n    }\\n    \\n    mapping(address => Record[]) public records;\\n    mapping(address => Doctor) public doctors;\\n    mapping(address => Patient[]) public patientsByDoctor;\\n    // mapping(address => Patient[]) public patientsByAddress;\\n    Patient[] public allPatients;\\n    \\n    constructor(string memory _contractTitle) {\\n        owner = msg.sender;\\n        contractTitle = _contractTitle;\\n    }\\n    \\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only contract owner can call this function\\\");\\n        _;\\n    }\\n    \\n    modifier onlyDoctor() {\\n        require(doctors[msg.sender].doctorAddress != address(0), \\\"Only registered doctor can call this function\\\");\\n        _;\\n    }\\n    \\n    function addDoctor(address _doctorAddress, string memory _crm) public onlyOwner {\\n        require(doctors[_doctorAddress].doctorAddress == address(0), \\\"Doctor already registered\\\");\\n        \\n        doctors[_doctorAddress] = Doctor(_crm, _doctorAddress);\\n    }\\n\\n    function generateRandomPatient() public onlyDoctor {\\n\\n\\n            uint randNo = 0;\\n            randNo = uint (keccak256(abi.encodePacked (msg.sender, block.timestamp, randNo)))%100;\\n\\n            string memory name = RandomName[block.timestamp % RandomName.length];\\n            string memory cpf = RandomCPF[block.timestamp % RandomCPF.length];\\n            uint256 birthDate = randNo;\\n            string memory bloodType = RandomBloodType[block.timestamp % RandomBloodType.length];\\n            uint256 recipientAge = uint (keccak256(abi.encodePacked (msg.sender, block.timestamp, randNo)))%100;\\n            address patientWalletAddress = address(uint160(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty))) % 10**38));\\n            uint256 organSize = uint (keccak256(abi.encodePacked (msg.sender, block.timestamp, randNo)))%100;\\n            uint256 urgency = uint (keccak256(abi.encodePacked (msg.sender, block.timestamp, randNo)))%100;\\n            string memory disease = RandomDisease[block.timestamp % RandomDisease.length];\\n            uint256 curability = uint (keccak256(abi.encodePacked (msg.sender, block.timestamp, randNo)))%100;\\n            uint256 qConstant = uint (keccak256(abi.encodePacked (msg.sender, block.timestamp, randNo)))%100;\\n\\n            addPatient(name, cpf, birthDate, bloodType, recipientAge, patientWalletAddress, organSize, urgency, disease, curability, qConstant);\\n        \\n\\n    }\\n    \\n    function addPatient(\\n        string memory _name,\\n        string memory _cpf,\\n        uint256 _birthDate,\\n        string memory _bloodType,\\n        uint256 _recipientAge,\\n        address _patientWalletAddress,\\n        uint256 _organSize,\\n        uint256 _urgency,\\n        string memory _disease,\\n        uint256 _curability,\\n        uint256 _qConstant\\n    ) public onlyDoctor {\\n        patientsByDoctor[msg.sender].push(Patient({\\n            name: _name,\\n            cpf: _cpf,\\n            birthDate: _birthDate,\\n            doctorAddress: msg.sender,\\n            patientWalletAddress: _patientWalletAddress,\\n            bloodType: _bloodType,\\n            recipientAge: _recipientAge,\\n            organSize: _organSize,\\n            urgency: _urgency,\\n            disease: _disease,\\n            curability: _curability,\\n            qConstant: _qConstant,\\n            queueEntryDate: block.timestamp\\n        }));\\n        \\n        allPatients.push(Patient({\\n            name: _name,\\n            cpf: _cpf,\\n            birthDate: _birthDate,\\n            doctorAddress: msg.sender,\\n            patientWalletAddress: _patientWalletAddress,\\n            bloodType: _bloodType,\\n            recipientAge: _recipientAge,\\n            organSize: _organSize,\\n            urgency: _urgency,\\n            disease: _disease,\\n            curability: _curability,\\n            qConstant: _qConstant,\\n            queueEntryDate: block.timestamp\\n        }));\\n\\n        // patientsByAddress[msg.sender].push(Patient({\\n        //     name: _name,\\n        //     cpf: _cpf,\\n        //     birthDate: _birthDate,\\n        //     priority: _priority,\\n        //     doctorAddress: msg.sender,\\n        //     patientWalletAddress: _patientWalletAddress,\\n        //     bloodType: _bloodType,\\n        //     recipientAge: _recipientAge,\\n        //     organSize: _organSize,\\n        //     urgency: _urgency,\\n        //     curability: _curability,\\n        //     qConstant: _qConstant,\\n        //     queueEntryDate: block.timestamp\\n        // }));\\n    }\\n\\n    // function that generates 10 pacients for testing\\n\\n    function getDoctorCRM(address _doctorAddress) public view returns (string memory) {\\n        require(doctors[_doctorAddress].doctorAddress != address(0), \\\"Doctor address is not registered\\\");\\n        \\n        return doctors[_doctorAddress].crm;\\n    }\\n    \\n    function getAllPatientsByDoctor(address _doctorAddress) public onlyDoctor() view returns (Patient[] memory) {\\n        return patientsByDoctor[_doctorAddress];\\n    }\\n\\n    // function getMyData() public view returns (Patient[] memory) {\\n    //     return patientsByAddress[msg.sender];\\n    // }\\n    \\n    function getAllPatients() public view returns (Patient[] memory) {\\n        // if sender is a doctor, return all patients with all data\\n        if (doctors[msg.sender].doctorAddress != address(0)) {\\n            return allPatients;\\n        }\\n\\n        // if sender is not a doctor, return all expected name and cpf\\n\\n        Patient[] memory patients = new Patient[](allPatients.length);\\n\\n        for (uint256 i = 0; i < allPatients.length; i++) {\\n            patients[i] = Patient({\\n                name: \\\"\\\", // 0\\n                cpf: \\\"\\\", // 1\\n                birthDate: allPatients[i].birthDate, // 2\\n                doctorAddress: allPatients[i].doctorAddress, // 3\\n                patientWalletAddress: allPatients[i].patientWalletAddress, // 4\\n                bloodType: allPatients[i].bloodType, // 5\\n                recipientAge: allPatients[i].recipientAge, // 6\\n                organSize: allPatients[i].organSize, // 7\\n                urgency: allPatients[i].urgency, // 8\\n                disease: allPatients[i].disease, // 9\\n                curability: allPatients[i].curability, // 10\\n                qConstant: allPatients[i].qConstant, // 11\\n                queueEntryDate: allPatients[i].queueEntryDate // 12\\n            });\\n        }\\n        return patients;\\n    }\\n    \\n    function getTitle() public view returns (string memory) {\\n        return contractTitle;\\n    }\\n    \\n    function elevatePriority(address _patientAddress, uint256 _newPriority) public onlyDoctor {\\n        Patient[] storage patients = patientsByDoctor[msg.sender];\\n        \\n        for (uint256 i = 0; i < patients.length; i++) {\\n            if (patients[i].patientWalletAddress == _patientAddress) {\\n                require(_newPriority > patients[i].urgency, \\\"New priority must be higher than current priority\\\");\\n\\n                records[_patientAddress].push(Record({\\n                    patientAddress: _patientAddress,\\n                    oldValue: patients[i].urgency,\\n                    newValue: _newPriority,\\n                    field: \\\"urgency\\\",\\n                    doctorAddress: msg.sender,\\n                    date: block.timestamp\\n                }));\\n                \\n                patients[i].urgency = _newPriority;\\n                allPatients[i].urgency = _newPriority;\\n                \\n                break;\\n            }\\n        }\\n    }\\n\\n    function getPatientRecords(address _patientAddress) public view returns (Record[] memory) {\\n        return records[_patientAddress];\\n    }\\n    \\n    function getPatientByAddress(address _patientAddress) public view returns (string memory, string memory, uint256, address, address, string memory, uint256, uint256, uint256, uint256, uint256, string memory, uint256, Record[] memory ) {\\n\\n\\n\\n        for (uint256 i = 0; i < allPatients.length; i++) {\\n            if (allPatients[i].patientWalletAddress == _patientAddress) {\\n                if (_patientAddress == allPatients[i].patientWalletAddress) {\\n                    return (\\n                        allPatients[i].name,\\n                        allPatients[i].cpf,\\n                        allPatients[i].birthDate,\\n                        allPatients[i].doctorAddress,\\n                        allPatients[i].patientWalletAddress,\\n                        allPatients[i].bloodType,\\n                        allPatients[i].recipientAge,\\n                        allPatients[i].organSize,\\n                        allPatients[i].urgency,\\n                        allPatients[i].curability,\\n                        allPatients[i].qConstant,\\n                        allPatients[i].disease,\\n                        allPatients[i].organSize,\\n                        records[allPatients[i].patientWalletAddress].length > 0 ? records[allPatients[i].patientWalletAddress] : new Record[](0)\\n                    );\\n                }\\n\\n                return (\\n                    \\\"\\\",\\n                    \\\"\\\",\\n                    allPatients[i].birthDate, // 2\\n                    allPatients[i].doctorAddress, // 4\\n                    allPatients[i].patientWalletAddress, // 5\\n                    allPatients[i].bloodType, // 6\\n                    allPatients[i].recipientAge, // 7\\n                    allPatients[i].urgency, // 8\\n                    allPatients[i].curability, // 9\\n                    allPatients[i].qConstant, // 10\\n                    allPatients[i].queueEntryDate, // 11\\n                    allPatients[i].disease,\\n                    allPatients[i].organSize,\\n                    records[allPatients[i].patientWalletAddress].length > 0 ? records[allPatients[i].patientWalletAddress] : new Record[](0)\\n                );\\n            }\\n        }\\n        \\n        revert(\\\"Patient not found\\\");\\n    }\\n}\",\"keccak256\":\"0xad10ae1b846f6394b8f2e9267aac8ae207e71ab5d197613cb78448b7110f72a2\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806318a231a91461214f57806318bd484714612077578063276f4106146119cd5780633a3c9776146119965780633cc684a1146118e45780637cf1e445146116815780637dfc0bdb14610d4e57806382a6c0ac14610ca65780638da5cb5b14610c7d5780639c33e95d14610bda578063a90e609b14610b89578063a9208eae146107e4578063a9583c2214610783578063aa9ebfdb14610732578063ba5c033514610663578063c71c7d3a14610612578063d8f608df146103d7578063e8113e731461032f578063fd190da8146101e05763ff3c1a8f146100f857600080fd5b346101db5760003660031901126101db576040516000600180549061011c82612486565b808552918181169081156101b4575060011461015b575b61015784610143818603826123d8565b604051918291602083526020830190612177565b0390f35b600081815292507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b82841061019c57505050810160200161014382610133565b80546020858701810191909152909301928101610184565b60ff191660208087019190915292151560051b850190920192506101439150839050610133565b600080fd5b346101db576020806003193601126101db576101fa6122cd565b9033600052600780825260018060a01b03908160019461022482876040600020015416151561266e565b1660005260089283815260406000209182549361024085612bdc565b9561024e60405197886123d8565b8587526000948552838520928488015b87871061027357604051806101578b826121b7565b600d868b92604051610284816123a1565b61028d896124c0565b815261029a858a016124c0565b83820152600289015460408201528760038a01541660608201528760048a01541660808201526102cc60058a016124c0565b60a0820152600689015460c08201528589015460e0820152868901546101008201526009890154610120820152600a890154610140820152600b89015461016082015261031b600c8a016124c0565b61018082015281520195019601959361025e565b346101db576020806003193601126101db576001600160a01b03806103526122cd565b169081600052600783526001604060002001541615610394576000526007815261037f60406000206124c0565b90610157604051928284938452830190612177565b6064826040519062461bcd60e51b825280600483015260248201527f446f63746f722061646472657373206973206e6f7420726567697374657265646044820152fd5b346101db5760203660031901126101db576004356009548110156101db576009600052600d026104287f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af82016124c0565b6101576104567f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b084016124c0565b7f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b18401547f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b28501547f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b3860154929591926001600160a01b0391821691166104fe7f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b484016124c0565b7f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b58401547f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b6850154907f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b7860154927f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b8870154947f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b9880154966106057f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7bb7f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7ba8b01549a016124c0565b996040519d8e9d8e6125bd565b346101db5760203660031901126101db576004356002548110156101db576101436101579160026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace016124c0565b346101db5760203660031901126101db5761067c6122cd565b61068590612f8c565b9a9c919860409a919a98939798969496519d8e9d8e946101c080875286016106ac91612177565b85810360208701526106bd91612177565b6040909401526001600160a01b0391821660608e01521660808c01528a810360a08c01526106ea91612177565b9460c08a015260e089015261010088015261012087015261014086015284810361016086015261071991612177565b906101808401528281036101a0840152610157916122e3565b346101db5760203660031901126101db576004356005548110156101db576101436101579160056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0016124c0565b346101db5760203660031901126101db576107da6001600160a01b03806107a86122cd565b16600052600760205260406000209060016107c2836124c0565b92015416604051928392604084526040840190612177565b9060208301520390f35b346101db5760403660031901126101db576107fd6122cd565b3360005260078060205261082260018060a01b0360016040600020015416151561266e565b3360009081526008602052604081206001600160a01b0390931692905b8154811015610b87578361085382846125a1565b50600401546001600160a01b0316146108745761086f90612bf3565b61083f565b91600861088184846125a1565b5001549360249485351115610b295780600052600660205260406000209160086108ab86866125a1565b50015492604051926108bc84612386565b83526020830193845260408301873581526040519160408301936001600160401b039484811086821117610b1457604052835266757267656e637960c81b6020840152606085019283523360808601524260a08601528054600160401b811015610aff5761092f91600182018155612652565b959095610aea57845186546001600160a01b0319166001600160a01b0391909116178655516001860155516002850155518051918211610ad5576109766003850154612486565b601f8111610a8e575b50602090601f8311600114610a0d5793600560a06109ee95858a98966109fa9a9660089c98600092610a02575b50508160011b916000199060031b1c19161760038501555b60048401600180841b036080830151166001600160601b03841b82541617905501519101556125a1565b50838535910155612566565b509135910155005b015190508d806109ac565b906003850160005260206000209160005b601f1985168110610a76575060a06109ee956001866109fa9a968c9a9660059660089e9a601f19811610610a5d575b505050811b0160038501556109c4565b015160001960f88460031b161c191690558d8080610a4d565b91926020600181928685015181550194019201610a1e565b600385016000526020600020601f840160051c810160208510610ace575b601f830160051c82018110610ac257505061097f565b60008155600101610aac565b5080610aac565b86634e487b7160e01b60005260416004526000fd5b88634e487b7160e01b60005260006004526000fd5b89634e487b7160e01b60005260416004526000fd5b8a634e487b7160e01b60005260416004526000fd5b60405162461bcd60e51b8152602060048201526031818701527f4e6577207072696f72697479206d75737420626520686967686572207468616e6044820152702063757272656e74207072696f7269747960781b6064820152608490fd5b005b346101db5760203660031901126101db576004356003548110156101db576101436101579160036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b016124c0565b346101db5760003660031901126101db5760405160006001805490610bfe82612486565b808552918181169081156101b45750600114610c245761015784610143818603826123d8565b600081815292507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828410610c6557505050810160200161014382610133565b80546020858701810191909152909301928101610c4d565b346101db5760003660031901126101db576000546040516001600160a01b039091168152602090f35b346101db5760403660031901126101db57610cbf6122cd565b6001600160a01b0390811660009081526006602052604090208054602435908110156101db57610cee91612652565b508181541690600181015492610d3f6002830154916005610d11600386016124c0565b916004860154169401549260405196879687526020870152604086015260c0606086015260c0850190612177565b91608084015260a08301520390f35b346101db5760003660031901126101db5733600090815260076020526040902060010154610d86906001600160a01b0316151561266e565b604051602081013360601b8152426034830152600060548301526054825260808201918083106001600160401b038411176114005760649260405251902006600254610dd281426126d0565b9081101561166b57610e0a9060026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace016124c0565b90610e28610e22610e1d600454426126d0565b61244f565b506124c0565b600354610e3581426126d0565b9081101561166b57610e6d9060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b016124c0565b6040513360601b6001600160601b031916602082015242603482015260548101849052909290606490610ead81607481015b03601f1981018352826123d8565b60208151910120069260405193426020860152446040860152604085528460608101106001600160401b0360608701111761140057606085810160408190528651602088012033831b6001600160601b031916608089019081524260948a015260b48901879052605483526f4b3b4ca85a86c47a098a2240000000009091066001600160a01b0316976064939192610f47906074906123d8565b01519020069060646040516020810190610f8581610e9f8942338791605493916001600160601b03199060601b168352601483015260348201520190565b5190200692600554610f9781426126d0565b9081101561166b57610fcf9060056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0016124c0565b6040513360601b6001600160601b03191660208201908152426034830152605482018890529198916064916110078160748101610e9f565b51902006956064604051602081019061104481610e9f8642338791605493916001600160601b03199060601b168352601483015260348201520190565b519020069733600052600760205261106d60018060a01b0360016040600020015416151561266e565b3360005260086020526110e060406000206040519061108b826123a1565b8d82528360208301528460408301523360608301528560808301528660a08301528760c08301528860e0830152896101008301528a6101208301528b610140830152426101608301528c6101808301526126f0565b6040519a6110ed8c6123a1565b8b5260208b015260408a01523360608a0152608089015260a088015260c087015260e086015261010085015261012084015261014083015242610160830152610180820152600954600160401b811015611400578060016111519201600955612566565b6116555781519182516001600160401b038111611400576111728354612486565b601f8111611611575b506020601f82116001146115a9578192939460009261159e575b50508160011b916000199060031b1c19161782555b60208101519182516001600160401b038111611400576111cd6001830154612486565b601f8111611557575b506020601f82116001146114e957819293946000926114de575b50508160011b916000199060031b1c19161760018201555b6040820151600282015560608201516003820180546001600160a01b039283166001600160a01b031991821617909155608084015160048401805491909316911617905560a08201518051906001600160401b0382116114005761126f6005840154612486565b601f8111611497575b50602090601f83116001146114215791806101809492600c94600092611416575b50508160011b916000199060031b1c19161760058201555b60c0840151600682015560e0840151600782015561010084015160088201556101208401516009820155610140840151600a820155610160840151600b820155019101519081516001600160401b038111611400576113108254612486565b601f81116113b8575b50602092601f8211600114611357579281929360009261134c575b5050600019600383901b1c191660019190911b179055005b015190508380611334565b601f198216938360005260206000209160005b8681106113a05750836001959610611387575b505050811b019055005b015160001960f88460031b161c1916905583808061137d565b9192602060018192868501518155019401920161136a565b826000526020600020601f830160051c810191602084106113f6575b601f0160051c01905b8181106113ea5750611319565b600081556001016113dd565b90915081906113d4565b634e487b7160e01b600052604160045260246000fd5b015190508680611299565b906005840160005260206000209160005b601f198516811061147f5750926101809492600192600c9583601f19811610611466575b505050811b0160058201556112b1565b015160001960f88460031b161c19169055868080611456565b91926020600181928685015181550194019201611432565b600584016000526020600020601f840160051c8101602085106114d7575b601f830160051c820181106114cb575050611278565b600081556001016114b5565b50806114b5565b0151905084806111f0565b6001830160005260206000209060005b601f198416811061153f5750600193949583601f19811610611526575b505050811b016001820155611208565b015160001960f88460031b161c19169055848080611516565b9091602060018192858a0151815501930191016114f9565b600183016000526020600020601f830160051c810160208410611597575b601f830160051c8201811061158b5750506111d6565b60008155600101611575565b5080611575565b015190508480611195565b8360005260206000209060005b601f19841681106115f95750600193949583601f198116106115e0575b505050811b0182556111aa565b015160001960f88460031b161c191690558480806115d3565b9091602060018192858a0151815501930191016115b6565b836000526020600020601f830160051c81016020841061164e575b601f830160051c8201811061164257505061117b565b6000815560010161162c565b508061162c565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052603260045260246000fd5b346101db5760403660031901126101db5761169a6122cd565b6001600160401b03906024358281116101db576116bb9036906004016123f9565b60005490926001600160a01b039290918316330361188c57821692836000526020916007835260019284846040600020015416611848576040519260408401848110848211176114005760405283528083019580875260005260078152604060002092519081519283116114005782916117358554612486565b601f81116117f3575b5081601f841160011461178d5750600092611782575b5050600019600383901b1c191690831b1781555b019151166001600160601b0360a01b825416179055600080f35b015190508680611754565b9190869450601f1984168660005283600020936000905b8282106117da57505084116117c1575b505050811b018155611768565b015160001960f88460031b161c191690558680806117b4565b84840151865589979095019493840193908101906117a4565b909192508460005282600020601f850160051c81019184861061183e575b8594939291601f89920160051c01915b82811061182f57505061173e565b60008155869550889101611821565b9091508190611811565b6064906040519062461bcd60e51b82526004820152601960248201527f446f63746f7220616c72656164792072656769737465726564000000000000006044820152fd5b60405162461bcd60e51b815260206004820152602a60248201527f4f6e6c7920636f6e7472616374206f776e65722063616e2063616c6c207468696044820152693990333ab731ba34b7b760b11b6064820152608490fd5b346101db5760403660031901126101db576118fd6122cd565b6001600160a01b0390811660009081526008602052604090208054602435908110156101db5761192c916125a1565b509061015761193a836124c0565b91611947600185016124c0565b936002810154918060038301541690600483015416611968600584016124c0565b6006840154600785015490600886015492600987015494600a88015496610605600c600b8b01549a016124c0565b346101db5760203660031901126101db576004356004548110156101db576119bd9061244f565b61165557610143610157916124c0565b346101db576101603660031901126101db576004356001600160401b0381116101db576119fe9036906004016123f9565b6024356001600160401b0381116101db57611a1d9036906004016123f9565b6064356001600160401b0381116101db57611a3c9036906004016123f9565b60a4356001600160a01b03811681036101db57610104356001600160401b0381116101db57611a6f9036906004016123f9565b92336000526007602052611a9460018060a01b0360016040600020015416151561266e565b336000526008602052611b21604060002060405190611ab2826123a1565b8782526020820184905260443560408301523360608301526001600160a01b038516608083015260a0820186905260843560c083015260c43560e083015260e43561010083015261012435610120830152610144356101408301524261016083015261018082018790526126f0565b60405194611b2e866123a1565b8552602085015260443560408501523360608501526001600160a01b0316608084015260a083015260843560c083015260c43560e083015260e435610100830152610124356101208301526101443561014083015242610160830152610180820152600954600160401b81101561140057806001611baf9201600955612566565b6116555781519182516001600160401b03811161140057611bd08354612486565b601f8111612033575b506020601f8211600114611fcb5781929394600092611fc0575b50508160011b916000199060031b1c19161782555b60208101519182516001600160401b03811161140057611c2b6001830154612486565b601f8111611f79575b506020601f8211600114611f0b5781929394600092611f00575b50508160011b916000199060031b1c19161760018201555b6040820151600282015560608201516003820180546001600160a01b039283166001600160a01b031991821617909155608084015160048401805491909316911617905560a08201518051906001600160401b03821161140057611ccd6005840154612486565b601f8111611eb9575b50602090601f8311600114611e435791806101809492600c94600092611e38575b50508160011b916000199060031b1c19161760058201555b60c0840151600682015560e0840151600782015561010084015160088201556101208401516009820155610140840151600a820155610160840151600b820155019101519081516001600160401b03811161140057611d6e8254612486565b601f8111611df0575b50602092601f8211600114611da9579281929360009261134c575050600019600383901b1c191660019190911b179055005b601f198216938360005260206000209160005b868110611dd8575083600195961061138757505050811b019055005b91926020600181928685015181550194019201611dbc565b826000526020600020601f830160051c81019160208410611e2e575b601f0160051c01905b818110611e225750611d77565b60008155600101611e15565b9091508190611e0c565b015190508680611cf7565b906005840160005260206000209160005b601f1985168110611ea15750926101809492600192600c9583601f19811610611e88575b505050811b016005820155611d0f565b015160001960f88460031b161c19169055868080611e78565b91926020600181928685015181550194019201611e54565b600584016000526020600020601f840160051c810160208510611ef9575b601f830160051c82018110611eed575050611cd6565b60008155600101611ed7565b5080611ed7565b015190508480611c4e565b6001830160005260206000209060005b601f1984168110611f615750600193949583601f19811610611f48575b505050811b016001820155611c66565b015160001960f88460031b161c19169055848080611f38565b9091602060018192858a015181550193019101611f1b565b600183016000526020600020601f830160051c810160208410611fb9575b601f830160051c82018110611fad575050611c34565b60008155600101611f97565b5080611f97565b015190508480611bf3565b8360005260206000209060005b601f198416811061201b5750600193949583601f19811610612002575b505050811b018255611c08565b015160001960f88460031b161c19169055848080611ff5565b9091602060018192858a015181550193019101611fd8565b836000526020600020601f830160051c810160208410612070575b601f830160051c82018110612064575050611bd9565b6000815560010161204e565b508061204e565b346101db576020806003193601126101db576001600160a01b03908161209b6122cd565b1660005260068082526040600020908154916120b683612bdc565b946120c460405196876123d8565b838652600091825284822090858088015b8685106120ef57604051828152806101578185018c6122e3565b600191869160405161210081612386565b858754168152848701548382015260028701546040820152612124600388016124c0565b6060820152856004880154166080820152600587015460a082015281520193019301929186906120d5565b346101db5760003660031901126101db5761015761216b612c2c565b604051918291826121b7565b919082519283825260005b8481106121a3575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201612182565b602080820190808352835180925260409283810182858560051b8401019601946000925b8584106121ec575050505050505090565b9091929394959685806122bc600193603f198682030188528b5161226861222f61221f83516101a0808752860190612177565b8684015185820388870152612177565b898301518a850152878060a01b0360608181860151169086015260809081850151169085015260a0808401519085830390860152612177565b9160c0808301519082015260e0808301519082015261010080830151908201526101208083015190820152610140808301519082015261016080830151908201526101808092015191818403910152612177565b9901940194019295949391906121db565b600435906001600160a01b03821682036101db57565b908082519081815260208091019281808460051b8301019501936000915b8483106123115750505050505090565b9091929394958480600192601f19858203018652895190848060a01b03918281511682528381015184830152604080820151908301526123606060808301519060c08091860152840190612177565b9260809081830151169083015260a0809101519101529801930193019194939290612301565b60c081019081106001600160401b0382111761140057604052565b6101a081019081106001600160401b0382111761140057604052565b602081019081106001600160401b0382111761140057604052565b90601f801991011681019081106001600160401b0382111761140057604052565b81601f820112156101db578035906001600160401b038211611400576040519261242d601f8401601f1916602001856123d8565b828452602083830101116101db57816000926020809301838601378301015290565b60045481101561166b5760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b90600182811c921680156124b6575b60208310146124a057565b634e487b7160e01b600052602260045260246000fd5b91607f1691612495565b90604051918260008254926124d484612486565b9081845260019485811690816000146125435750600114612500575b50506124fe925003836123d8565b565b9093915060005260209081600020936000915b81831061252b5750506124fe935082010138806124f0565b85548884018501529485019487945091830191612513565b9150506124fe94506020925060ff191682840152151560051b82010138806124f0565b60095481101561166b57600d906009600052027f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0190600090565b805482101561166b57600052600d602060002091020190600090565b99969b989591946125f361264f9e9c99966125e561261e97948e6101a0908181520190612177565b8d810360208f015290612177565b60408c01949094526001600160a01b0391821660608c01521660808a015288820360a08a0152612177565b9760c087015260e0860152610100850152610120840152610140830152610160820152610180818403910152612177565b90565b805482101561166b576000526006602060002091020190600090565b1561267557565b60405162461bcd60e51b815260206004820152602d60248201527f4f6e6c79207265676973746572656420646f63746f722063616e2063616c6c2060448201526c3a3434b990333ab731ba34b7b760991b6064820152608490fd5b81156126da570690565b634e487b7160e01b600052601260045260246000fd5b8054600160401b8110156114005761270f9060019283820181556125a1565b6116555782518051916001600160401b039283811161140057806127338354612486565b93601f94858111612b88575b50602090858311600114612b2557600092612b1a575b5050600019600383901b1c191690851b1781555b83810160208601518051908582116114005781906127878454612486565b868111612ac7575b50602090868311600114612a6457600092612a59575b5050600019600383901b1c191690861b1790555b6040850151600282015560608501516003820180546001600160a01b039283166001600160a01b031991821617909155608087015160048401805491909316911617905560a0850151805160058301918582116114005761281a8354612486565b858111612a11575b506020908583116001146129a2579180600c94926101809694600092612997575b5050600019600383901b1c191690881b1790555b60c0870151600682015560e0870151600782015561010087015160088201556101208701516009820155610140870151600a820155610160870151600b820155019401518051928311611400576128ae8554612486565b82811161294f575b5060209183116001146128ef579282939183926000946128e4575b50501b916000199060031b1c1916179055565b0151925038806128d1565b90601f198316918560005283826000209360005b878282106129365750501061291d575b505050811b019055565b015160001960f88460031b161c19169055388080612913565b8486015187559095019460209485019487935001612903565b8560005260206000208380860160051c8201926020871061298e575b0160051c019085905b8281106129825750506128b6565b60008155018590612974565b9250819261296b565b015190503880612843565b879291601f1983169185600052816000209260005b8181106129f95750916101809795939185600c989694106129e0575b505050811b019055612857565b015160001960f88460031b161c191690553880806129d3565b8284015185558b9690940193602093840193016129b7565b8360005260206000208680850160051c82019260208610612a50575b0160051c019088905b828110612a44575050612822565b60008155018890612a36565b92508192612a2d565b0151905038806127a5565b90889350601f1983169185600052816000209260005b818110612aaf57508411612a96575b505050811b0190556127b9565b015160001960f88460031b161c19169055388080612a89565b8284015185558b969094019360209384019301612a7a565b9091508360005260206000208680850160051c82019260208610612b11575b918a91869594930160051c01915b828110612b0257505061278f565b600081558594508a9101612af4565b92508192612ae6565b015190503880612755565b90879350601f1983169185600052816000209260005b818110612b7057508411612b57575b505050811b018155612769565b015160001960f88460031b161c19169055388080612b4a565b8284015185558a969094019360209384019301612b3b565b9091506000848152602081208680860160051c82019360208710612bd3575b918a9187969594930160051c01925b838110612bc55750505061273f565b8281558695508a9101612bb6565b93508193612ba7565b6001600160401b0381116114005760051b60200190565b6000198114612c025760010190565b634e487b7160e01b600052601160045260246000fd5b805182101561166b5760209160051b010190565b3360009081526007602081815260408084206001908101546001600160a01b039591908616612e4c5750600991825494612c6586612bdc565b96612c72835198896123d8565b868852601f19612c8188612bdc565b0186855b828110612de557505050835b878110612ca357505050505050505090565b8686868387612cb182612566565b506002015487612cc084612566565b50600301541688612cd085612566565b506004015416612cdf85612566565b50612ce986612566565b5060060154918c612cf988612566565b50015493612d0688612566565b506008015495612d1589612566565b509a612d208a612566565b50015497612d2d8a612566565b50600a015499612d3c90612566565b50600b01549a81519d8e612d4f816123a1565b8351612d5a816123bd565b8381528152835192612d6b846123bd565b835201528c015260608b015260808a0152600501612d88906124c0565b60a089015260c088015260e0870152610100860152610120850152610140840152610160830152600c01612dbb906124c0565b610180820152612dcb828b612c18565b52612dd6818a612c18565b50612de090612bf3565b612c91565b8551612df0816123a1565b60608082528084830152888883015288818301528860808301528060a08301528860c08301528860e08301528861010083015288610120830152886101408301528861016083015261018082015282828d010152018790612c85565b9394919290600993845494612e6086612bdc565b97612e6d8351998a6123d8565b868952848901958285527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af94965b888810612eaf575050505050505050505090565b600d878b928751612ebf816123a1565b612ec88a6124c0565b8152612ed5858b016124c0565b8382015260028a0154898201528560038b01541660608201528560048b0154166080820152612f0660058b016124c0565b60a082015260068a015460c0820152868a015460e082015260088a0154610100820152878a0154610120820152600a8a0154610140820152600b8a0154610160820152612f55600c8b016124c0565b610180820152815201960197019694612e9b565b604051602081018181106001600160401b03821117611400576040526000815290565b600980549160005b838110612fd45760405162461bcd60e51b815260206004820152601160248201527014185d1a595b9d081b9bdd08199bdd5b99607a1b6044820152606490fd5b612fdd81612566565b50600401546001600160a01b03838116911681146130045750612fff90612bf3565b612f94565b9150925061301183612566565b50600401546001600160a01b03161461321a57600261302f83612566565b5001549161303c81612566565b50600301546001600160a01b03169161305482612566565b50600401546001600160a01b03169161306c81612566565b5091600661307983612566565b50015491600861308882612566565b5001549161309582612566565b50015490600a6130a482612566565b50015490600b6130b382612566565b500154906130c081612566565b509060076130cd82612566565b500154906130da81612566565b50600401546001600160a01b03166000908152600660205260409020541561320c5761310590612566565b50600401546001600160a01b03166000908152600660205260409020805461312c81612bdc565b9161313a60405193846123d8565b818352602083019060005260206000206000915b8383106131a257505050505b604051613166816123bd565b600081529c604051613177816123bd565b600081529c9b9a9960050161318b906124c0565b989796959493600c0161319d906124c0565b929190565b600660206001926040516131b581612386565b848060a01b0386541681528486015483820152600286015460408201526131de600387016124c0565b6060820152848060a01b036004870154166080820152600586015460a082015281520192019201919061314e565b50613215612f69565b61315a565b9061322481612566565b509061322f81612566565b509361323a82612566565b50926002809401549461324c84612566565b506003908101546001600160a01b03169590919061326986612566565b50600401546001600160a01b03169561328181612566565b509561328c82612566565b50916006809301549661329e82612566565b50926007809401549760086132b285612566565b500154976132bf85612566565b50015496600a6132ce86612566565b500154966132db86612566565b50966132e687612566565b500154956132f381612566565b50600401546001600160a01b0316600090815260208381526040918290205491929091156134045761332490612566565b50600401546001600160a01b0316600090815283825282902080549490929061334c86612bdc565b96613359835198896123d8565b8688526000948552838520928489015b8887106133a05750505050505050505061338390926124c0565b9d600101613390906124c0565b9c9b9a9960050161318b906124c0565b878660019284516133b081612386565b848060a01b038954168152848901548382015287890154868201526133d6878a016124c0565b6060820152848060a01b0360048a0154166080820152600589015460a0820152815201950196019593613369565b505050505050613383613415612f69565b926124c056fea2646970667358221220777a940a7362322cce7bf3afabb9cec9bfe14f50b4cd84ecf3327b342be14a1564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "contractTitle",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 30,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "RandomName",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 54,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "RandomBloodType",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 78,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "RandomCPF",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 102,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "RandomDisease",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 153,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "records",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(Record)142_storage)dyn_storage)"
      },
      {
        "astId": 158,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "doctors",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Doctor)147_storage)"
      },
      {
        "astId": 164,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "patientsByDoctor",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_struct(Patient)129_storage)dyn_storage)"
      },
      {
        "astId": 168,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "allPatients",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(Patient)129_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Patient)129_storage)dyn_storage": {
        "base": "t_struct(Patient)129_storage",
        "encoding": "dynamic_array",
        "label": "struct MedicalContract.Patient[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Record)142_storage)dyn_storage": {
        "base": "t_struct(Record)142_storage",
        "encoding": "dynamic_array",
        "label": "struct MedicalContract.Record[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(Patient)129_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MedicalContract.Patient[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Patient)129_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(Record)142_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MedicalContract.Record[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Record)142_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Doctor)147_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MedicalContract.Doctor)",
        "numberOfBytes": "32",
        "value": "t_struct(Doctor)147_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Doctor)147_storage": {
        "encoding": "inplace",
        "label": "struct MedicalContract.Doctor",
        "members": [
          {
            "astId": 144,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "crm",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 146,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "doctorAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Patient)129_storage": {
        "encoding": "inplace",
        "label": "struct MedicalContract.Patient",
        "members": [
          {
            "astId": 104,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 106,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "cpf",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 108,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "birthDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 110,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "doctorAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 112,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "patientWalletAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 114,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "bloodType",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 116,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "recipientAge",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 118,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "organSize",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 120,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "urgency",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 122,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "curability",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 124,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "qConstant",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 126,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "queueEntryDate",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 128,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "disease",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Record)142_storage": {
        "encoding": "inplace",
        "label": "struct MedicalContract.Record",
        "members": [
          {
            "astId": 131,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "patientAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 133,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "oldValue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 135,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "newValue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 137,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "field",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 139,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "doctorAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 141,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "date",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}