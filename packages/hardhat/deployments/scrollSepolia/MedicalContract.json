{
  "address": "0xaF26145d3c11c81fbC950806cbe86F725D783c9b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractTitle",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RamdomAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RamdomCurabilityLevels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RamdomUrgencyLevels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RandomBloodType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RandomCPF",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RandomDisease",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RandomName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_doctorAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_crm",
          "type": "string"
        }
      ],
      "name": "addDoctor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_cpf",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_birthDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_bloodType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_recipientAge",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_patientWalletAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_organSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_urgency",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_disease",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_curability",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_qConstant",
          "type": "uint256"
        }
      ],
      "name": "addPatient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPatients",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "cpf",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "birthDate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "patientWalletAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bloodType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "recipientAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "organSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "urgency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "curability",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qConstant",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "queueEntryDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "disease",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractTitle",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "doctors",
      "outputs": [
        {
          "internalType": "string",
          "name": "crm",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_patientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newPriority",
          "type": "uint256"
        }
      ],
      "name": "elevatePriority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "generateRandomPatient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPatients",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "cpf",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "birthDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "doctorAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "patientWalletAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bloodType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "recipientAge",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "organSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "urgency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "curability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qConstant",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "queueEntryDate",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "disease",
              "type": "string"
            }
          ],
          "internalType": "struct MedicalContract.Patient[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_doctorAddress",
          "type": "address"
        }
      ],
      "name": "getAllPatientsByDoctor",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "cpf",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "birthDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "doctorAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "patientWalletAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "bloodType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "recipientAge",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "organSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "urgency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "curability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "qConstant",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "queueEntryDate",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "disease",
              "type": "string"
            }
          ],
          "internalType": "struct MedicalContract.Patient[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_doctorAddress",
          "type": "address"
        }
      ],
      "name": "getDoctorCRM",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_patientAddress",
          "type": "address"
        }
      ],
      "name": "getPatientByAddress",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "patientAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "oldValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newValue",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "field",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "doctorAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            }
          ],
          "internalType": "struct MedicalContract.Record[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_patientAddress",
          "type": "address"
        }
      ],
      "name": "getPatientRecords",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "patientAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "oldValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "newValue",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "field",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "doctorAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "date",
              "type": "uint256"
            }
          ],
          "internalType": "struct MedicalContract.Record[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTitle",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "patientsByDoctor",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "cpf",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "birthDate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "patientWalletAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bloodType",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "recipientAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "organSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "urgency",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "curability",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qConstant",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "queueEntryDate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "disease",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "records",
      "outputs": [
        {
          "internalType": "address",
          "name": "patientAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "field",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "doctorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c4e199a522fe991aefb8abbd19e46e70ba3f629b49180d5169b48d2677464bd",
  "receipt": {
    "to": null,
    "from": "0xb7D3F862ebBed6C5E61B76e407ce28ea16aD1289",
    "contractAddress": "0xaF26145d3c11c81fbC950806cbe86F725D783c9b",
    "transactionIndex": 0,
    "gasUsed": "6548655",
    "logsBloom": "0x
    "blockHash": "0x8bccd30ec6d6ad3432a5f2cb82acf653e2db012d95daf72fb5ce31e94518e2e1",
    "transactionHash": "0x1c4e199a522fe991aefb8abbd19e46e70ba3f629b49180d5169b48d2677464bd",
    "logs": [],
    "blockNumber": 3393348,
    "cumulativeGasUsed": "6548655",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Pulmão"
  ],
  "numDeployments": 19,
  "solcInputHash": "871a46903816c4f6bb41eeb64cbb2c4e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractTitle\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RamdomAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RamdomCurabilityLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RamdomUrgencyLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RandomBloodType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RandomCPF\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RandomDisease\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RandomName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_doctorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_crm\",\"type\":\"string\"}],\"name\":\"addDoctor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_cpf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_birthDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_bloodType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_recipientAge\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_patientWalletAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_organSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_urgency\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_disease\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_curability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_qConstant\",\"type\":\"uint256\"}],\"name\":\"addPatient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPatients\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cpf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patientWalletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bloodType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"recipientAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"organSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"urgency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qConstant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueEntryDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"disease\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractTitle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"doctors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"crm\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_patientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newPriority\",\"type\":\"uint256\"}],\"name\":\"elevatePriority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateRandomPatient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPatients\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cpf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patientWalletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bloodType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"recipientAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"organSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"urgency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qConstant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueEntryDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"disease\",\"type\":\"string\"}],\"internalType\":\"struct MedicalContract.Patient[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_doctorAddress\",\"type\":\"address\"}],\"name\":\"getAllPatientsByDoctor\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cpf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patientWalletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bloodType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"recipientAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"organSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"urgency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qConstant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueEntryDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"disease\",\"type\":\"string\"}],\"internalType\":\"struct MedicalContract.Patient[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_doctorAddress\",\"type\":\"address\"}],\"name\":\"getDoctorCRM\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_patientAddress\",\"type\":\"address\"}],\"name\":\"getPatientByAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"patientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"field\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct MedicalContract.Record[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_patientAddress\",\"type\":\"address\"}],\"name\":\"getPatientRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"patientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"field\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct MedicalContract.Record[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTitle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"patientsByDoctor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cpf\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"birthDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"patientWalletAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bloodType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"recipientAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"organSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"urgency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qConstant\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queueEntryDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"disease\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"patientAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"field\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"doctorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MedicalContract.sol\":\"MedicalContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/MedicalContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract MedicalContract {\\n    address public owner;\\n    string public contractTitle;\\n\\n    string[] public RandomName = ['Joao', 'Maria', 'Jose', 'Ana', 'Francisco', 'Antonio', 'Luiz', 'Paulo', 'Carlos', 'Manoel', 'Pedro', 'Francisca', 'Marcos', 'Raimundo', 'Sebastiao', 'Antonia', 'Marcelo', 'Marcia', 'Ricardo', 'Fernando']; \\n    string[] public RandomBloodType = ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-', 'A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-', 'A+', 'A-', 'B+', 'B-'];\\n    string[] public RandomCPF = ['123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00', '123.456.789-00', '987.654.321-00'];\\n    string[] public RandomDisease = [\\\"Hipertensao Pulmonar\\\",\\\"Bronquiectasia nao fibrocistica\\\", \\\"Fibrose cistica\\\", \\\"Doenca Intersticial Pulmonar\\\",\\\"Doenca Pulmonar Cronica\\\",\\\"Doenca Renal Cronica (fase terminal)\\\",\\\"Ceratopatia bolhosa\\\",\\\"Ceratocone\\\",\\\"Ceratite\\\",\\\"Queimaduras quimicas da cornea\\\",\\\"Distrofias do estroma da cornea\\\",\\\"Leucemia\\\",\\\"Linfomas\\\",\\\"Doencas dos ganglios\\\",\\\"Doencas do baco\\\",\\\"Anemia grave adquirida ou congenita\\\",\\\"Mielodisplasias\\\"];\\n\\n\\n    uint256[] public RamdomUrgencyLevels = [80,70,90,95,85,40,70,60,75,95,50,60,55,70,50,90,85,80,85,95,90];\\n    uint256[] public RamdomCurabilityLevels = [70,80,60,40,50,70,30,40,50,90,70,80,75,70,65,80,75,70,75,90,85];\\n    uint256[] public RamdomAge = [65,55, 60, 50, 50,40,30,55,50, 60,45,30,40, 50,40,45,55,55,55, 45, 55];\\n\\n\\n    struct Patient {\\n        string name;\\n        string cpf;\\n        uint256 birthDate;\\n        address doctorAddress;\\n         address patientWalletAddress;\\n        string bloodType;\\n        uint256 recipientAge;\\n        uint256 organSize;\\n        uint256 urgency; // Fator de urg\\u00eancia\\n        uint256 curability; // Fator de curabilidade\\n        uint256 qConstant; // Fator Q Constant\\n        uint256 queueEntryDate; // Data que foi adicionado na fila\\n        string disease;\\n    }\\n    \\n    struct Record {\\n        address patientAddress;\\n        uint256 oldValue;\\n        uint256 newValue;\\n        string field;\\n        address doctorAddress;\\n        uint256 date;\\n    }\\n    \\n    struct Doctor {\\n        string crm;\\n        address doctorAddress;\\n    }\\n    \\n    mapping(address => Record[]) public records;\\n    mapping(address => Doctor) public doctors;\\n    mapping(address => Patient[]) public patientsByDoctor;\\n    // mapping(address => Patient[]) public patientsByAddress;\\n    Patient[] public allPatients;\\n    \\n    constructor(string memory _contractTitle) {\\n        owner = msg.sender;\\n        contractTitle = _contractTitle;\\n    }\\n    \\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Only contract owner can call this function\\\");\\n        _;\\n    }\\n    \\n    modifier onlyDoctor() {\\n        require(doctors[msg.sender].doctorAddress != address(0), \\\"Only registered doctor can call this function\\\");\\n        _;\\n    }\\n    \\n    function addDoctor(address _doctorAddress, string memory _crm) public onlyOwner {\\n        require(doctors[_doctorAddress].doctorAddress == address(0), \\\"Doctor already registered\\\");\\n        \\n        doctors[_doctorAddress] = Doctor(_crm, _doctorAddress);\\n    }\\n\\n    function generateRandomPatient() public onlyDoctor {\\n\\n        for (uint256 i = 0; i < 6; i++) {\\n            uint randNo = 0;\\n            randNo = uint (keccak256(abi.encodePacked (msg.sender, block.timestamp, randNo)))%100;\\n\\n            string memory name = RandomName[i];\\n            string memory cpf = RandomCPF[i];\\n            uint256 birthDate = RamdomAge[i];\\n            string memory bloodType = RandomBloodType[i];\\n            uint256 recipientAge = uint (keccak256(abi.encodePacked (msg.sender, block.timestamp, randNo)))%100;\\n            address patientWalletAddress = address(uint160(uint(keccak256(abi.encodePacked(i, blockhash(block.number))))));\\n            uint256 organSize = uint (keccak256(abi.encodePacked (msg.sender, block.timestamp, randNo)))%100;\\n            uint256 urgency = RamdomUrgencyLevels[i];\\n            string memory disease = RandomDisease[i];\\n            uint256 curability = RamdomCurabilityLevels[i];\\n            uint256 qConstant = uint (keccak256(abi.encodePacked (msg.sender, block.timestamp, randNo)))%100;\\n\\n            addPatient(name, cpf, birthDate, bloodType, recipientAge, patientWalletAddress, organSize, urgency, disease, curability, qConstant);\\n\\n        }\\n\\n        \\n\\n    }\\n    \\n    function addPatient(\\n        string memory _name,\\n        string memory _cpf,\\n        uint256 _birthDate,\\n        string memory _bloodType,\\n        uint256 _recipientAge,\\n        address _patientWalletAddress,\\n        uint256 _organSize,\\n        uint256 _urgency,\\n        string memory _disease,\\n        uint256 _curability,\\n        uint256 _qConstant\\n    ) public onlyDoctor {\\n        patientsByDoctor[msg.sender].push(Patient({\\n            name: _name,\\n            cpf: _cpf,\\n            birthDate: _birthDate,\\n            doctorAddress: msg.sender,\\n            patientWalletAddress: _patientWalletAddress,\\n            bloodType: _bloodType,\\n            recipientAge: _recipientAge,\\n            organSize: _organSize,\\n            urgency: _urgency,\\n            disease: _disease,\\n            curability: _curability,\\n            qConstant: _qConstant,\\n            queueEntryDate: block.timestamp\\n        }));\\n        \\n        allPatients.push(Patient({\\n            name: _name,\\n            cpf: _cpf,\\n            birthDate: _birthDate,\\n            doctorAddress: msg.sender,\\n            patientWalletAddress: _patientWalletAddress,\\n            bloodType: _bloodType,\\n            recipientAge: _recipientAge,\\n            organSize: _organSize,\\n            urgency: _urgency,\\n            disease: _disease,\\n            curability: _curability,\\n            qConstant: _qConstant,\\n            queueEntryDate: block.timestamp\\n        }));\\n\\n        // patientsByAddress[msg.sender].push(Patient({\\n        //     name: _name,\\n        //     cpf: _cpf,\\n        //     birthDate: _birthDate,\\n        //     priority: _priority,\\n        //     doctorAddress: msg.sender,\\n        //     patientWalletAddress: _patientWalletAddress,\\n        //     bloodType: _bloodType,\\n        //     recipientAge: _recipientAge,\\n        //     organSize: _organSize,\\n        //     urgency: _urgency,\\n        //     curability: _curability,\\n        //     qConstant: _qConstant,\\n        //     queueEntryDate: block.timestamp\\n        // }));\\n    }\\n\\n    // function that generates 10 pacients for testing\\n\\n    function getDoctorCRM(address _doctorAddress) public view returns (string memory) {\\n        require(doctors[_doctorAddress].doctorAddress != address(0), \\\"Doctor address is not registered\\\");\\n        \\n        return doctors[_doctorAddress].crm;\\n    }\\n    \\n    function getAllPatientsByDoctor(address _doctorAddress) public onlyDoctor() view returns (Patient[] memory) {\\n        return patientsByDoctor[_doctorAddress];\\n    }\\n\\n    // function getMyData() public view returns (Patient[] memory) {\\n    //     return patientsByAddress[msg.sender];\\n    // }\\n    \\n    function getAllPatients() public view returns (Patient[] memory) {\\n        // if sender is a doctor, return all patients with all data\\n        if (doctors[msg.sender].doctorAddress != address(0)) {\\n            return allPatients;\\n        }\\n\\n        // if sender is not a doctor, return all expected name and cpf\\n\\n        Patient[] memory patients = new Patient[](allPatients.length);\\n\\n        for (uint256 i = 0; i < allPatients.length; i++) {\\n            patients[i] = Patient({\\n                name: \\\"\\\", // 0\\n                cpf: \\\"\\\", // 1\\n                birthDate: allPatients[i].birthDate, // 2\\n                doctorAddress: allPatients[i].doctorAddress, // 3\\n                patientWalletAddress: allPatients[i].patientWalletAddress, // 4\\n                bloodType: allPatients[i].bloodType, // 5\\n                recipientAge: allPatients[i].recipientAge, // 6\\n                organSize: allPatients[i].organSize, // 7\\n                urgency: allPatients[i].urgency, // 8\\n                disease: allPatients[i].disease, // 9\\n                curability: allPatients[i].curability, // 10\\n                qConstant: allPatients[i].qConstant, // 11\\n                queueEntryDate: allPatients[i].queueEntryDate // 12\\n            });\\n        }\\n        return patients;\\n    }\\n    \\n    function getTitle() public view returns (string memory) {\\n        return contractTitle;\\n    }\\n    \\n    function elevatePriority(address _patientAddress, uint256 _newPriority) public onlyDoctor {\\n        Patient[] storage patients = patientsByDoctor[msg.sender];\\n        \\n        for (uint256 i = 0; i < patients.length; i++) {\\n            if (patients[i].patientWalletAddress == _patientAddress) {\\n                require(_newPriority > patients[i].urgency, \\\"New priority must be higher than current priority\\\");\\n\\n                records[_patientAddress].push(Record({\\n                    patientAddress: _patientAddress,\\n                    oldValue: patients[i].urgency,\\n                    newValue: _newPriority,\\n                    field: \\\"Urg\\\\u00eancia\\\",\\n                    doctorAddress: msg.sender,\\n                    date: block.timestamp\\n                }));\\n                \\n                patients[i].urgency = _newPriority;\\n                allPatients[i].urgency = _newPriority;\\n                \\n                break;\\n            }\\n        }\\n    }\\n\\n    function getPatientRecords(address _patientAddress) public view returns (Record[] memory) {\\n        return records[_patientAddress];\\n    }\\n    \\n    function getPatientByAddress(address _patientAddress) public view returns (string memory, string memory, uint256, address, address, string memory, uint256, uint256, uint256, uint256, uint256, string memory, uint256, Record[] memory ) {\\n\\n\\n\\n        for (uint256 i = 0; i < allPatients.length; i++) {\\n            if (allPatients[i].patientWalletAddress == _patientAddress) {\\n                if (_patientAddress == allPatients[i].patientWalletAddress) {\\n                    return (\\n                        allPatients[i].name,\\n                        allPatients[i].cpf,\\n                        allPatients[i].birthDate,\\n                        allPatients[i].doctorAddress,\\n                        allPatients[i].patientWalletAddress,\\n                        allPatients[i].bloodType,\\n                        allPatients[i].recipientAge,\\n                        allPatients[i].urgency,\\n                        allPatients[i].curability,\\n                        allPatients[i].qConstant,\\n                        allPatients[i].queueEntryDate,\\n                        allPatients[i].disease,\\n                        allPatients[i].organSize,\\n                        records[allPatients[i].patientWalletAddress].length > 0 ? records[allPatients[i].patientWalletAddress] : new Record[](0)\\n                    );\\n                }\\n\\n                return (\\n                    \\\"\\\",\\n                    \\\"\\\",\\n                    allPatients[i].birthDate, // 2\\n                    allPatients[i].doctorAddress, // 4\\n                    allPatients[i].patientWalletAddress, // 5\\n                    allPatients[i].bloodType, // 6\\n                    allPatients[i].recipientAge, // 7\\n                    allPatients[i].urgency, // 8\\n                    allPatients[i].curability, // 9\\n                    allPatients[i].qConstant, // 10\\n                    allPatients[i].queueEntryDate, // 11\\n                    allPatients[i].disease,\\n                    allPatients[i].organSize,\\n                    records[allPatients[i].patientWalletAddress].length > 0 ? records[allPatients[i].patientWalletAddress] : new Record[](0)\\n                );\\n            }\\n        }\\n        \\n        revert(\\\"Patient not found\\\");\\n    }\\n}\",\"keccak256\":\"0x0b05498ee60dd560df2a8d792ab5cd0d3ce4353aff905fea4e4e1c906673ae7b\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806318a231a91461224c57806318bd4847146121755780631901351414612124578063276f410614611a545780633a3c977614611a275780633ac95eaa146119d65780633cc684a1146119245780637cf1e445146116bc5780637dfc0bdb14610dad57806382a6c0ac14610d055780638da5cb5b14610cdc5780639c33e95d14610c39578063a2ac4a8e14610be8578063a90e609b14610bb5578063a9208eae14610805578063a9583c22146107a4578063aa9ebfdb14610753578063ba5c033514610684578063c71c7d3a14610633578063d8f608df146103f8578063e8113e7314610350578063fd190da8146102015763ff3c1a8f1461011957600080fd5b346101fc5760003660031901126101fc576040516000600180549061013d826125ba565b808552918181169081156101d5575060011461017c575b6101788461016481860382612543565b604051918291602083526020830190612274565b0390f35b600081815292507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8284106101bd57505050810160200161016482610154565b805460208587018101919091529093019281016101a5565b60ff191660208087019190915292151560051b850190920192506101649150839050610154565b600080fd5b346101fc576020806003193601126101fc5761021b6123ca565b9033600052600a80825260018060a01b0390816001946102458287604060002001541615156127b0565b16600052600b9283815260406000209182549361026185612d23565b9561026f6040519788612543565b8587526000948552838520928488015b87871061029457604051806101788b826122b4565b600d868b926040516102a58161250c565b6102ae896125f4565b81526102bb858a016125f4565b83820152600289015460408201528760038a01541660608201528760048a01541660808201526102ed60058a016125f4565b60a0820152600689015460c0820152600789015460e082015260088901546101008201526009890154610120820152858901546101408201528689015461016082015261033c600c8a016125f4565b61018082015281520195019601959361027f565b346101fc576020806003193601126101fc576001600160a01b03806103736123ca565b169081600052600a835260016040600020015416156103b557600052600a81526103a060406000206125f4565b90610178604051928284938452830190612274565b6064826040519062461bcd60e51b825280600483015260248201527f446f63746f722061646472657373206973206e6f7420726567697374657265646044820152fd5b346101fc5760203660031901126101fc57600435600c548110156101fc57600c600052600d026104497fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c782016125f4565b6101786104777fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c884016125f4565b7fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c98401547fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8ca8501547fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8cb860154929591926001600160a01b03918216911661051f7fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8cc84016125f4565b7fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8cd8401547fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8ce850154907fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8cf860154927fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8d0870154947fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8d1880154966106267fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8d37fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8d28b01549a016125f4565b996040519d8e9d8e612702565b346101fc5760203660031901126101fc576004356002548110156101fc576101646101789160026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace016125f4565b346101fc5760203660031901126101fc5761069d6123ca565b6106a6906130a9565b9a9c919860409a919a98939798969496519d8e9d8e946101c080875286016106cd91612274565b85810360208701526106de91612274565b6040909401526001600160a01b0391821660608e01521660808c01528a810360a08c015261070b91612274565b9460c08a015260e089015261010088015261012087015261014086015284810361016086015261073a91612274565b906101808401528281036101a0840152610178916123e0565b346101fc5760203660031901126101fc576004356005548110156101fc576101646101789160056000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0016125f4565b346101fc5760203660031901126101fc576107fb6001600160a01b03806107c96123ca565b16600052600a60205260406000209060016107e3836125f4565b92015416604051928392604084526040840190612274565b9060208301520390f35b346101fc5760403660031901126101fc5761081e6123ca565b336000908152600a6020526040902060010154610845906001600160a01b031615156127b0565b336000908152600b602052604081206001600160a01b0390921691905b8154811015610bb3578261087682846126e6565b50600401546001600160a01b0316146108975761089290612812565b610862565b9060086108a483836126e6565b5001549260249384351115610b5557806000526009908160205260406000209160086108d086866126e6565b50015492604051926108e1846124f1565b83526020830193845260408301873581526040519160408301936001600160401b039484811086821117610b4057604052835268557267c3aa6e63696160b81b6020840152606085019283523360808601524260a08601528054600160401b811015610b2b5761095691600182018155612794565b959095610b1657845186546001600160a01b0319166001600160a01b0391909116178655516001860155516002850155518051918211610b015761099d60038501546125ba565b601f8111610aba575b50602090601f8311600114610a395793600560a0610a1a95858a9896610a269a9660089c98600092610a2e575b50508160011b916000199060031b1c19161760038501555b60048401600180841b036080830151166bffffffffffffffffffffffff841b82541617905501519101556126e6565b508385359101556126ab565b509135910155005b015190508d806109d3565b906003850160005260206000209160005b601f1985168110610aa2575060a0610a1a95600186610a269a968c9a9660059660089e9a601f19811610610a89575b505050811b0160038501556109eb565b015160001960f88460031b161c191690558d8080610a79565b91926020600181928685015181550194019201610a4a565b600385016000526020600020601f840160051c810160208510610afa575b601f830160051c82018110610aee5750506109a6565b60008155600101610ad8565b5080610ad8565b86634e487b7160e01b60005260416004526000fd5b88634e487b7160e01b60005260006004526000fd5b89634e487b7160e01b60005260416004526000fd5b8a634e487b7160e01b60005260416004526000fd5b60405162461bcd60e51b8152602060048201526031818601527f4e6577207072696f72697479206d75737420626520686967686572207468616e6044820152702063757272656e74207072696f7269747960781b6064820152608490fd5b005b346101fc5760203660031901126101fc576004356003548110156101fc57610164610be2610178926124ba565b9061269a565b346101fc5760203660031901126101fc576004356006548110156101fc5760209060066000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0154604051908152f35b346101fc5760003660031901126101fc5760405160006001805490610c5d826125ba565b808552918181169081156101d55750600114610c83576101788461016481860382612543565b600081815292507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828410610cc457505050810160200161016482610154565b80546020858701810191909152909301928101610cac565b346101fc5760003660031901126101fc576000546040516001600160a01b039091168152602090f35b346101fc5760403660031901126101fc57610d1e6123ca565b6001600160a01b0390811660009081526009602052604090208054602435908110156101fc57610d4d91612794565b508181541690600181015492610d9e6002830154916005610d70600386016125f4565b916004860154169401549260405196879687526020870152604086015260c0606086015260c0850190612274565b91608084015260a08301520390f35b346101fc5760003660031901126101fc57336000908152600a6020526040902060010154610de5906001600160a01b031615156127b0565b60005b6006811015610bb357604051602081013360601b81524260348301526054600081840152825260808201918083106001600160401b0384111761143b5760649260405251902006906002548110156116a6576002600052610e6a817f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace016125f4565b91610e7d610e7783612483565b506125f4565b6008548310156116a6576008600052827ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3015491610ebd610e77856124ba565b6040513360601b6001600160601b031916602082015242603482015260548101839052606490610efa81607481015b03601f198101835282612543565b6020815191012006906040519186602084015243406040840152604083528260608101106001600160401b0360608501111761143b57606083810160408190528451602086012033831b6001600160601b0319166080870190815242609488015260b48701889052605483526001600160a01b03909116956064939192610f8390607490612543565b0151902006916006548810156116a657877ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0154936005548910156116a6576005600052610ff2897f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0016125f4565b976007548a10156116a65760076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6888a01546040513360601b6001600160601b031916602082019081524260348301526054820199909952909760649161105e8160748101610eec565b519020069733600052600a60205261108760018060a01b036001604060002001541615156127b0565b33600052600b6020526110fa8c6040600020604051916110a68361250c565b82528360208301528460408301523360608301528560808301528660a08301528760c08301528860e0830152896101008301528a6101208301528b610140830152426101608301528c610180830152612837565b6040519b6111078d61250c565b8c5260208c015260408b01523360608b015260808a015260a089015260c088015260e087015261010086015261012085015261014084015242610160840152610180830152600c54600160401b81101561143b5780600161116b9201600c556126ab565b9290926116905780519283516001600160401b03811161143b5761118f82546125ba565b601f811161164c575b506020601f82116001146115e35781929394956000926115d8575b50508160011b916000199060031b1c19161781555b60208201519283516001600160401b03811161143b576111eb60018401546125ba565b601f8111611591575b506020601f8211600114611522578192939495600092611517575b50508160011b916000199060031b1c19161760018301555b6040830151600283015560608301516003830180546001600160a01b039283166001600160a01b031991821617909155608085015160048501805491909316911617905560a083015180519093906001600160401b03811161143b5761129060058501546125ba565b601f81116114d0575b506020601f821160011461145c578190610180949596600092611451575b50508160011b916000199060031b1c19161760058501555b60c0810151600685015560e0810151600785015561010081015160088501556101208101516009850155610140810151600a850155610160810151600b8501550151918251926001600160401b03841161143b57611330600c8301546125ba565b601f81116113f4575b50602090601f8511600114611383579380600c9261137396600092611378575b50508160011b916000199060031b1c191617910155612812565b610de8565b015190508680611359565b90600c83016000526020600020916000601f198716905b8181106113dc575092600192879261137398600c96106113c3575b505050811b01910155612812565b015160001960f88460031b161c191690558680806113b5565b9293602060018192878601518155019501930161139a565b600c83016000526020600020601f860160051c810160208710611434575b601f830160051c82018110611428575050611339565b60008155600101611412565b5080611412565b634e487b7160e01b600052604160045260246000fd5b0151905086806112b7565b6005850160005260206000209560005b601f19841681106114b85750958291610180959697600194601f1981161061149f575b505050811b0160058501556112cf565b015160001960f88460031b161c1916905586808061148f565b8282015188556001909701966020928301920161146c565b600585016000526020600020601f830160051c810160208410611510575b601f830160051c82018110611504575050611299565b600081556001016114ee565b50806114ee565b01519050858061120f565b6001840160005260206000209060005b601f1984168110611579575060019394959683601f19811610611560575b505050811b016001830155611227565b015160001960f88460031b161c19169055858080611550565b9091602060018192858b015181550193019101611532565b600184016000526020600020601f830160051c8101602084106115d1575b601f830160051c820181106115c55750506111f4565b600081556001016115af565b50806115af565b0151905085806111b3565b8260005260206000209060005b601f1984168110611634575060019394959683601f1981161061161b575b505050811b0181556111c8565b015160001960f88460031b161c1916905585808061160e565b9091602060018192858b0151815501930191016115f0565b826000526020600020601f830160051c810160208410611689575b601f830160051c8201811061167d575050611198565b60008155600101611667565b5080611667565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052603260045260246000fd5b346101fc5760403660031901126101fc576116d56123ca565b6001600160401b03906024358281116101fc576116f6903690600401612564565b60005490926001600160a01b03929091831633036118cc5782169283600052602091600a8352600192848460406000200154166118885760405192604084018481108482111761143b57604052835280830195808752600052600a81526040600020925190815192831161143b57829161177085546125ba565b601f8111611833575b5081601f84116001146117cd57506000926117c2575b5050600019600383901b1c191690831b1781555b019151166bffffffffffffffffffffffff60a01b825416179055600080f35b01519050868061178f565b9190869450601f1984168660005283600020936000905b82821061181a5750508411611801575b505050811b0181556117a3565b015160001960f88460031b161c191690558680806117f4565b84840151865589979095019493840193908101906117e4565b909192508460005282600020601f850160051c81019184861061187e575b8594939291601f89920160051c01915b82811061186f575050611779565b60008155869550889101611861565b9091508190611851565b6064906040519062461bcd60e51b82526004820152601960248201527f446f63746f7220616c72656164792072656769737465726564000000000000006044820152fd5b60405162461bcd60e51b815260206004820152602a60248201527f4f6e6c7920636f6e7472616374206f776e65722063616e2063616c6c207468696044820152693990333ab731ba34b7b760b11b6064820152608490fd5b346101fc5760403660031901126101fc5761193d6123ca565b6001600160a01b039081166000908152600b602052604090208054602435908110156101fc5761196c916126e6565b509061017861197a836125f4565b91611987600185016125f4565b9360028101549180600383015416906004830154166119a8600584016125f4565b6006840154600785015490600886015492600987015494600a88015496610626600c600b8b01549a016125f4565b346101fc5760203660031901126101fc576004356008548110156101fc5760209060086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30154604051908152f35b346101fc5760203660031901126101fc576004356004548110156101fc57610164610be261017892612483565b346101fc576101603660031901126101fc576004356001600160401b0381116101fc57611a85903690600401612564565b6024356001600160401b0381116101fc57611aa4903690600401612564565b6064356001600160401b0381116101fc57611ac3903690600401612564565b60a4356001600160a01b03811681036101fc57610104356001600160401b0381116101fc57611af6903690600401612564565b9233600052600a602052611b1b60018060a01b036001604060002001541615156127b0565b33600052600b602052611ba8604060002060405190611b398261250c565b8782526020820184905260443560408301523360608301526001600160a01b038516608083015260a0820186905260843560c083015260c43560e083015260e4356101008301526101243561012083015261014435610140830152426101608301526101808201879052612837565b60405194611bb58661250c565b8552602085015260443560408501523360608501526001600160a01b0316608084015260a083015260843560c083015260c43560e083015260e435610100830152610124356101208301526101443561014083015242610160830152610180820152600c54600160401b81101561143b57806001611c369201600c556126ab565b6116905781519182516001600160401b03811161143b57611c5783546125ba565b601f81116120e0575b506020601f8211600114612078578192939460009261206d575b50508160011b916000199060031b1c19161782555b60208101519182516001600160401b03811161143b57611cb260018301546125ba565b601f8111612026575b506020601f8211600114611fb85781929394600092611fad575b50508160011b916000199060031b1c19161760018201555b6040820151600282015560608201516003820180546001600160a01b039283166001600160a01b031991821617909155608084015160048401805491909316911617905560a08201518051906001600160401b03821161143b57611d5460058401546125ba565b601f8111611f66575b50602090601f8311600114611ef05791806101809492600c94600092611ee5575b50508160011b916000199060031b1c19161760058201555b60c0840151600682015560e0840151600782015561010084015160088201556101208401516009820155610140840151600a820155610160840151600b820155019101519081516001600160401b03811161143b57611df582546125ba565b601f8111611e9d575b50602092601f8211600114611e3c5792819293600092611e31575b5050600019600383901b1c191660019190911b179055005b015190508380611e19565b601f198216938360005260206000209160005b868110611e855750836001959610611e6c575b505050811b019055005b015160001960f88460031b161c19169055838080611e62565b91926020600181928685015181550194019201611e4f565b826000526020600020601f830160051c81019160208410611edb575b601f0160051c01905b818110611ecf5750611dfe565b60008155600101611ec2565b9091508190611eb9565b015190508680611d7e565b906005840160005260206000209160005b601f1985168110611f4e5750926101809492600192600c9583601f19811610611f35575b505050811b016005820155611d96565b015160001960f88460031b161c19169055868080611f25565b91926020600181928685015181550194019201611f01565b600584016000526020600020601f840160051c810160208510611fa6575b601f830160051c82018110611f9a575050611d5d565b60008155600101611f84565b5080611f84565b015190508480611cd5565b6001830160005260206000209060005b601f198416811061200e5750600193949583601f19811610611ff5575b505050811b016001820155611ced565b015160001960f88460031b161c19169055848080611fe5565b9091602060018192858a015181550193019101611fc8565b600183016000526020600020601f830160051c810160208410612066575b601f830160051c8201811061205a575050611cbb565b60008155600101612044565b5080612044565b015190508480611c7a565b8360005260206000209060005b601f19841681106120c85750600193949583601f198116106120af575b505050811b018255611c8f565b015160001960f88460031b161c191690558480806120a2565b9091602060018192858a015181550193019101612085565b836000526020600020601f830160051c81016020841061211d575b601f830160051c82018110612111575050611c60565b600081556001016120fb565b50806120fb565b346101fc5760203660031901126101fc576004356007548110156101fc5760209060076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880154604051908152f35b346101fc576020806003193601126101fc576001600160a01b0390816121996123ca565b166000526009815260406000208054906121b282612d23565b936121c06040519586612543565b828552600091825283822090848087015b8585106121eb57604051828152806101788185018b6123e0565b6001916006916040516121fd816124f1565b858754168152848701548382015260028701546040820152612221600388016125f4565b6060820152856004880154166080820152600587015460a082015281520193019301929185906121d1565b346101fc5760003660031901126101fc57610178612268612d4e565b604051918291826122b4565b919082519283825260005b8481106122a0575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161227f565b602080820190808352835180925260409283810182858560051b8401019601946000925b8584106122e9575050505050505090565b9091929394959685806123b9600193603f198682030188528b5161236561232c61231c83516101a0808752860190612274565b8684015185820388870152612274565b898301518a850152878060a01b0360608181860151169086015260809081850151169085015260a0808401519085830390860152612274565b9160c0808301519082015260e0808301519082015261010080830151908201526101208083015190820152610140808301519082015261016080830151908201526101808092015191818403910152612274565b9901940194019295949391906122d8565b600435906001600160a01b03821682036101fc57565b908082519081815260208091019281808460051b8301019501936000915b84831061240e5750505050505090565b9091929394958480600192601f19858203018652895190848060a01b039182815116825283810151848301526040808201519083015261245d6060808301519060c08091860152840190612274565b9260809081830151169083015260a08091015191015298019301930191949392906123fe565b6004548110156116a65760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b6003548110156116a65760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b60c081019081106001600160401b0382111761143b57604052565b6101a081019081106001600160401b0382111761143b57604052565b602081019081106001600160401b0382111761143b57604052565b90601f801991011681019081106001600160401b0382111761143b57604052565b81601f820112156101fc578035906001600160401b03821161143b5760405192612598601f8401601f191660200185612543565b828452602083830101116101fc57816000926020809301838601378301015290565b90600182811c921680156125ea575b60208310146125d457565b634e487b7160e01b600052602260045260246000fd5b91607f16916125c9565b9060405191826000825492612608846125ba565b9081845260019485811690816000146126775750600114612634575b505061263292500383612543565b565b9093915060005260209081600020936000915b81831061265f57505061263293508201013880612624565b85548884018501529485019487945091830191612647565b91505061263294506020925060ff191682840152151560051b8201013880612624565b90611690576126a8906125f4565b90565b600c548110156116a657600d90600c600052027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70190600090565b80548210156116a657600052600d602060002091020190600090565b99969b989591946127386126a89e9c999661272a61276397948e6101a0908181520190612274565b8d810360208f015290612274565b60408c01949094526001600160a01b0391821660608c01521660808a015288820360a08a0152612274565b9760c087015260e0860152610100850152610120840152610140830152610160820152610180818403910152612274565b80548210156116a6576000526006602060002091020190600090565b156127b757565b60405162461bcd60e51b815260206004820152602d60248201527f4f6e6c79207265676973746572656420646f63746f722063616e2063616c6c2060448201526c3a3434b990333ab731ba34b7b760991b6064820152608490fd5b60001981146128215760010190565b634e487b7160e01b600052601160045260246000fd5b8054600160401b81101561143b576128569060019283820181556126e6565b6116905782518051916001600160401b039283811161143b578061287a83546125ba565b93601f94858111612ccf575b50602090858311600114612c6c57600092612c61575b5050600019600383901b1c191690851b1781555b838101602086015180519085821161143b5781906128ce84546125ba565b868111612c0e575b50602090868311600114612bab57600092612ba0575b5050600019600383901b1c191690861b1790555b6040850151600282015560608501516003820180546001600160a01b039283166001600160a01b031991821617909155608087015160048401805491909316911617905560a08501518051600583019185821161143b5761296183546125ba565b858111612b58575b50602090858311600114612ae9579180600c94926101809694600092612ade575b5050600019600383901b1c191690881b1790555b60c0870151600682015560e0870151600782015561010087015160088201556101208701516009820155610140870151600a820155610160870151600b82015501940151805192831161143b576129f585546125ba565b828111612a96575b506020918311600114612a3657928293918392600094612a2b575b50501b916000199060031b1c1916179055565b015192503880612a18565b90601f198316918560005283826000209360005b87828210612a7d57505010612a64575b505050811b019055565b015160001960f88460031b161c19169055388080612a5a565b8486015187559095019460209485019487935001612a4a565b8560005260206000208380860160051c82019260208710612ad5575b0160051c019085905b828110612ac95750506129fd565b60008155018590612abb565b92508192612ab2565b01519050388061298a565b879291601f1983169185600052816000209260005b818110612b405750916101809795939185600c98969410612b27575b505050811b01905561299e565b015160001960f88460031b161c19169055388080612b1a565b8284015185558b969094019360209384019301612afe565b8360005260206000208680850160051c82019260208610612b97575b0160051c019088905b828110612b8b575050612969565b60008155018890612b7d565b92508192612b74565b0151905038806128ec565b90889350601f1983169185600052816000209260005b818110612bf657508411612bdd575b505050811b019055612900565b015160001960f88460031b161c19169055388080612bd0565b8284015185558b969094019360209384019301612bc1565b9091508360005260206000208680850160051c82019260208610612c58575b918a91869594930160051c01915b828110612c495750506128d6565b600081558594508a9101612c3b565b92508192612c2d565b01519050388061289c565b90879350601f1983169185600052816000209260005b818110612cb757508411612c9e575b505050811b0181556128b0565b015160001960f88460031b161c19169055388080612c91565b8284015185558a969094019360209384019301612c82565b9091506000848152602081208680860160051c82019360208710612d1a575b918a9187969594930160051c01925b838110612d0c57505050612886565b8281558695508a9101612cfd565b93508193612cee565b6001600160401b03811161143b5760051b60200190565b80518210156116a65760209160051b010190565b6000338152600a602081815260018060a01b039260016040908581838520015416612f6a5750600c91825494612d8386612d23565b96612d9084519889612543565b868852601f19612d9f88612d23565b0186845b828110612f0357505050825b878110612dc157505050505050505090565b868686868487612dd0826126ab565b506002015488612ddf846126ab565b50600301541689612def856126ab565b506004015416612dfe856126ab565b50612e08866126ab565b506006015491612e17876126ab565b506007015493612e26886126ab565b506008015495612e35896126ab565b509a612e408a6126ab565b506009015498612e4f8b6126ab565b50015499612e5c906126ab565b50600b01549a81519e8f612e6f8161250c565b8351612e7a81612528565b8381528152835192612e8b84612528565b835201528d015260608c015260808b0152600501612ea8906125f4565b60a08a015260c089015260e088015261010087015261012086015261014085015261016084015201612ed9906125f4565b610180820152612ee9828b612d3a565b52612ef4818a612d3a565b50612efe90612812565b612daf565b8651612f0e8161250c565b60608082528084830152878983015287818301528760808301528060a08301528760c08301528760e08301528761010083015287610120830152876101408301528761016083015261018082015282828d010152018790612da3565b939491600c9391845494612f7d86612d23565b97612f8a8351998a612543565b868952848901958285527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c794965b888810612fcc575050505050505050505090565b600d878b928751612fdc8161250c565b612fe58a6125f4565b8152612ff2858b016125f4565b8382015260028a0154898201528560038b01541660608201528560048b015416608082015261302360058b016125f4565b60a082015260068a015460c082015260078a015460e082015260088a015461010082015260098a0154610120820152868a0154610140820152600b8a0154610160820152613072888b016125f4565b610180820152815201960197019694612fb8565b604051602081018181106001600160401b0382111761143b576040526000815290565b600c549060005b8281106130f05760405162461bcd60e51b815260206004820152601160248201527014185d1a595b9d081b9bdd08199bdd5b99607a1b6044820152606490fd5b6130f9816126ab565b50600401546001600160a01b0383811691168114613120575061311b90612812565b6130b0565b9150915061312d826126ab565b50600401546001600160a01b03161461333857600261314b826126ab565b50015490613158816126ab565b50600301546001600160a01b031690613170816126ab565b50600401546001600160a01b031690613188816126ab565b50906006613195826126ab565b5001549060086131a4826126ab565b5001549060096131b3826126ab565b50015490600a6131c2826126ab565b50015490600b6131d1826126ab565b500154906131de816126ab565b509060076131eb826126ab565b500154906131f8816126ab565b50600401546001600160a01b03166000908152600960205260409020541561332a57613223906126ab565b50600401546001600160a01b03166000908152600960205260409020805461324a81612d23565b916132586040519384612543565b818352602083019060005260206000206000915b8383106132c057505050505b60405161328481612528565b600081529c60405161329581612528565b600081529c9b9a996005016132a9906125f4565b989796959493600c016132bb906125f4565b929190565b600660206001926040516132d3816124f1565b848060a01b0386541681528486015483820152600286015460408201526132fc600387016125f4565b6060820152848060a01b036004870154166080820152600586015460a082015281520192019201919061326c565b50613333613086565b613278565b90613342826126ab565b5061334c836126ab565b5092613357816126ab565b509060028092015493613369826126ab565b506003908101546001600160a01b03169490613384846126ab565b50600401546001600160a01b03169461339c856126ab565b50946133a7816126ab565b50906006809201549560086133bb836126ab565b500154956133c8836126ab565b509160098093015496600a6133dc866126ab565b50015496600b6133eb876126ab565b500154966133f8876126ab565b50966007613405826126ab565b50015496613412826126ab565b50600401546001600160a01b0316600090815260208281526040918290205491939092911561352057613444906126ab565b50600460018060a01b03910154166000528152816000209182549461346886612d23565b9661347583519889612543565b8688526000948552838520928489015b8887106134bc5750505050505050505061349f90926125f4565b9d6001016134ac906125f4565b9c9b9a996005016132a9906125f4565b878660019284516134cc816124f1565b848060a01b038954168152848901548382015287890154868201526134f2878a016125f4565b6060820152848060a01b0360048a0154166080820152600589015460a0820152815201950196019593613485565b5050505050505061349f613532613086565b926125f456fea2646970667358221220869f207edbc1c523096f6f5d1f919b7bf02baa779db0aec29aaa55a37d5e08e664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "contractTitle",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 30,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "RandomName",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 54,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "RandomBloodType",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 78,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "RandomCPF",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 99,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "RandomDisease",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 124,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "RamdomUrgencyLevels",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 149,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "RamdomCurabilityLevels",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 174,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "RamdomAge",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 225,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "records",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_struct(Record)214_storage)dyn_storage)"
      },
      {
        "astId": 230,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "doctors",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(Doctor)219_storage)"
      },
      {
        "astId": 236,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "patientsByDoctor",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_struct(Patient)201_storage)dyn_storage)"
      },
      {
        "astId": 240,
        "contract": "contracts/MedicalContract.sol:MedicalContract",
        "label": "allPatients",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Patient)201_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Patient)201_storage)dyn_storage": {
        "base": "t_struct(Patient)201_storage",
        "encoding": "dynamic_array",
        "label": "struct MedicalContract.Patient[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Record)214_storage)dyn_storage": {
        "base": "t_struct(Record)214_storage",
        "encoding": "dynamic_array",
        "label": "struct MedicalContract.Record[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(Patient)201_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MedicalContract.Patient[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Patient)201_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(Record)214_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MedicalContract.Record[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Record)214_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Doctor)219_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MedicalContract.Doctor)",
        "numberOfBytes": "32",
        "value": "t_struct(Doctor)219_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Doctor)219_storage": {
        "encoding": "inplace",
        "label": "struct MedicalContract.Doctor",
        "members": [
          {
            "astId": 216,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "crm",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 218,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "doctorAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Patient)201_storage": {
        "encoding": "inplace",
        "label": "struct MedicalContract.Patient",
        "members": [
          {
            "astId": 176,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 178,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "cpf",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 180,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "birthDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 182,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "doctorAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 184,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "patientWalletAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 186,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "bloodType",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 188,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "recipientAge",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 190,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "organSize",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 192,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "urgency",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 194,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "curability",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 196,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "qConstant",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 198,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "queueEntryDate",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 200,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "disease",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(Record)214_storage": {
        "encoding": "inplace",
        "label": "struct MedicalContract.Record",
        "members": [
          {
            "astId": 203,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "patientAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 205,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "oldValue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 207,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "newValue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 209,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "field",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 211,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "doctorAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 213,
            "contract": "contracts/MedicalContract.sol:MedicalContract",
            "label": "date",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}